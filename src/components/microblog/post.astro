---
import type { Microblog } from "~libs/microblog";
import DynamicTimestamp from "~components/microblog/dynamic-timestamp";
import transformImage from "~libs/mb-img-transform";
import { createRichLinks, createLegacyRichLinks } from "~libs/mb-rich-links";

interface Props {
   post: Microblog;
   inFeed?: boolean;
   lazyImages?: boolean;
}

const { post, inFeed, lazyImages } = Astro.props;

const [year, month, day] = post.date_published
   .split("T")[0]
   .split("-")
   .map(Number);

let contentHtml = post.content_html;
contentHtml = transformImage(
   post.content_html,
   post.photos,
   lazyImages ? "lazy" : undefined,
);
contentHtml = createRichLinks(contentHtml);
contentHtml = createLegacyRichLinks(contentHtml);

export function isOlderThanWeek(dateString: string): boolean {
   const date = new Date(dateString.slice(0, -5));
   const oneWeekAgo = new Date();
   oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

   return date < oneWeekAgo;
}

const nonRelativeDateOptions: Intl.DateTimeFormatOptions = {
   year: "numeric",
   month: "long",
   day: "numeric",
   hour: "2-digit",
   minute: "2-digit",
   hourCycle: "h23",
};

function formatDate(dateString: string): string {
   return new Date(dateString.slice(0, -5)).toLocaleString(
      "en-US",
      nonRelativeDateOptions,
   );
}
---

<style>
   @reference "~styles/globals.css";
</style>

<article>
   {
      inFeed ?
         <header class="font-serif mb-4 leading-none">
            <a
               href={`/microblog/${year}/${month}/${day}/${post.id}`}
               class="group inline-flex flex-col gap-2"
            >
               <div class="inline">
                  <span class="italic text-xs text-black/[.72] anchor group-hover:highlighter">
                     <Fragment>
                        Posted{" "}
                        <time
                           datetime={post.date_published}
                           title={new Date(
                              post.date_published.slice(0, -5),
                           ).toLocaleString("en-US", nonRelativeDateOptions)}
                        >
                           {!isOlderThanWeek(post.date_published) ?
                              <DynamicTimestamp
                                 date={post.date_published}
                                 client:load
                              />
                           :  formatDate(post.date_published)}
                        </time>
                     </Fragment>
                     {post.date_modified &&
                        post.categories?.includes("show_updated") && (
                           <Fragment>
                              & updated
                              <span
                                 title={new Date(
                                    post.date_modified.slice(0, -5),
                                 ).toLocaleString(
                                    "en-US",
                                    nonRelativeDateOptions,
                                 )}
                              >
                                 {!isOlderThanWeek(post.date_modified) ?
                                    <DynamicTimestamp
                                       date={post.date_modified}
                                       client:load
                                    />
                                 :  formatDate(post.date_modified)}
                              </span>
                           </Fragment>
                        )}
                  </span>
               </div>
               {post.titled_post && (
                  <h2 class="group-hover:animate-pulse">{post.title}</h2>
               )}
            </a>
         </header>
      :  <header class="font-serif mb-4 pt-1 leading-none">
            <div class="inline-flex flex-col gap-3">
               <span
                  class="italic text-black/[.72]"
                  class:list={[{ "text-slightly-smaller": post.titled_post }]}
               >
                  Posted{" "}
                  <time datetime={post.date_published}>
                     {formatDate(post.date_published)}
                     {post.date_modified &&
                        post.categories?.includes("show_updated") && (
                           <Fragment>
                              & updated {formatDate(post.date_modified)}
                           </Fragment>
                        )}
                  </time>
               </span>
               {post.titled_post && (
                  <h2 class="inline-block pb-1 leading-none text-[calc(1em+1px)]">
                     {post.title}
                  </h2>
               )}
            </div>
         </header>
   }

   <Fragment set:html={contentHtml} />
</article>
