---
export const prerender = false;

import { SEO } from "astro-seo";
import BaseLayout from "~layouts/base.astro";

import type { PaginatedMicroblog } from "~libs/microblog";
import { getPaginatedMicroblog } from "~libs/microblog";
import Navigation from "~components/navigation";
import Feed from "~components/microblog/feed.astro";

const page = Number(Astro.url.searchParams.get("page"));

let PaginatedMicroblog: PaginatedMicroblog;
let error: Error | undefined = undefined;
try {
    PaginatedMicroblog = await getPaginatedMicroblog(page);
} catch (e) {
    error = e as Error;
    console.error(error);

    PaginatedMicroblog = {
        page: 0,
        pages: 0,
        total_items: 0,
        items_per_page: 0,
        next_page: null,
        previous_page: null,
        items: [],
    };
}

const getPageNumber = (path: string) => {
    const match = path.match(/\d+/);
    if (!match && path === "/api/paginated/list.json") return 1;
    return match ? Number(match[0]) : null;
};
---

<script>
    document.addEventListener("submit", (event) => {
        const form = document.getElementById(
            "pagination-form",
        ) as HTMLFormElement;
        if (!form) return;
        event.preventDefault();

        const input = form.querySelector("input");
        if (!input || input.id !== "pagination-input") return;

        const currentPage = parseInt(input.dataset.page!);
        const desiredPage = parseInt(input.value);
        const totalPages = parseInt(input.dataset.totalPages!);

        if (desiredPage === currentPage) return;

        if (desiredPage >= 1 && desiredPage <= totalPages) {
            const tempLink = document.createElement("a");
            tempLink.id = "temp-redirect-link";
            tempLink.style.display = "hidden";

            if (desiredPage === 1) {
                tempLink.href = `/microblog`;
            } else {
                tempLink.href = `/microblog?page=${desiredPage}`;
            }

            document.body.appendChild(tempLink);
            tempLink.click();
            document.body.removeChild(tempLink);
        }
    });

    document.addEventListener("input", (event) => {
        const input = event.target as HTMLInputElement;
        if (input.id !== "pagination-input") return;

        input.style.width = `${input.value.length}ch`;

        const maxPages = parseInt(input.dataset.totalPages || "1");
        const value = parseInt(input.value);
        if (value > maxPages) {
            input.value = maxPages.toString();
        }
    });

    document.addEventListener("keydown", (event) => {
        const input = event.target as HTMLInputElement;
        if (input.id !== "pagination-input") return;

        const allowedKeys = [
            "Backspace",
            "Delete",
            "Tab",
            "Escape",
            "Enter",
            "ArrowLeft",
            "ArrowRight",
            "Home",
            "End",
        ];
        if (allowedKeys.includes(event.key) || /^[0-9]$/.test(event.key)) {
            return;
        }

        event.preventDefault();
    });

    document.addEventListener(
        "blur",
        (event) => {
            const input = event.target as HTMLInputElement;
            if (input.id !== "pagination-input") return;

            const currentPage = input.dataset.page;
            if (currentPage) {
                input.value = Number(currentPage) > 0 ? currentPage : "1";
            }
        },
        true,
    );
</script>

<BaseLayout>
    <SEO
        slot="seo"
        title={page <= 0 ? "Microblog" : `Microblog (p. ${page})`}
        description="My place to share quick updates and musings in a tweet-like fashion."
        noindex={page > 0}
    />

    <header slot="header">
        <Navigation
            Links={[
                { href: "/", text: "Home" },
                {
                    href: "/microblog",
                    text: `${page <= 0 ? "Microblog" : `Microblog (p. ${page})`}`,
                },
            ]}
        />
    </header>

    <h1 class="font-medium">
        Microblog{page > 0 && <span> (p. {page})</span>}
    </h1>
    <p class="py-2">
        Welcome to my microblog â€” my place to share quick updates and musings in
        a tweet-like fashion. Externally, my microblog is available as a <a
            class="hyperlink"
            href="https://microblog.vandor.sx/feed.json"
            target="_blank">JSON feed</a
        > and via <a
            class="hyperlink"
            href="https://micro.blog/jade?remote_follow=1"
            target="_blank">ActivityPub</a
        >. In addition, I make an effort to cross-post to <a
            class="hyperlink"
            href="https://bsky.app/profile/vandor.sx"
            target="_blank">Bluesky</a
        >.
    </p>

    <div class="mt-4">
        <Feed posts={PaginatedMicroblog.items} error={error} />
    </div>

    <div class="pt-10 flex flex-col md:-mr-4 md:-mb-1 lg:-mr-8 lg:-mb-2">
        <div
            class="flex items-center justify-between leading-none w-full gap-1"
        >
            {
                PaginatedMicroblog.previous_page ?
                    <a
                        href={
                            (
                                getPageNumber(
                                    PaginatedMicroblog.previous_page,
                                ) === 1
                            ) ?
                                "/microblog"
                            :   `/microblog?page=${getPageNumber(PaginatedMicroblog.previous_page)}`
                        }
                        aria-label={`To page ${getPageNumber(PaginatedMicroblog.previous_page)}`}
                        class="bg-green border-black border text-white hover:bg-black px-1.5 py-1 inline-flex items-center justify-start w-24"
                    >
                        <span class="relative top-[1px] text-[calc(1em-2px)]">
                            &larr; Prev. page
                        </span>
                    </a>
                :   <div
                        class="bg-green border-black border text-white hover:bg-black cursor-not-allowed px-1.5 py-1 inline-flex items-center justify-start w-24 opacity-30"
                        aria-disabled="true"
                    >
                        <span class="relative top-[1px] text-[calc(1em-2px)]">
                            &larr; Prev. page
                        </span>
                    </div>
            }
            <div class="flex items-center">
                <span>Page&nbsp;</span>
                <form id="pagination-form" class="m-0 p-0">
                    <input
                        id="pagination-input"
                        type="number"
                        value={PaginatedMicroblog.page}
                        min="1"
                        max={PaginatedMicroblog.pages}
                        class="h-[32px] min-h-[32px] max-h-[32px] border-none text-center appearance-none bg-transparent focus:outline-hidden [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none text-base scale-95"
                        class:list={[
                            { "w-[1ch]": page.toString().length === 1 },
                            { "w-[2ch]": page.toString().length === 2 },
                            { "w-[3ch]": page.toString().length === 3 },
                            { "w-[4ch]": page.toString().length === 4 },
                        ]}
                        data-page={page}
                        data-total-pages={PaginatedMicroblog.pages}
                    />
                </form>
                <span>&nbsp;of {PaginatedMicroblog.pages}</span>
            </div>
            {
                PaginatedMicroblog.next_page ?
                    <a
                        href={`/microblog?page=${getPageNumber(PaginatedMicroblog.next_page)}`}
                        aria-label={`To page ${getPageNumber(PaginatedMicroblog.next_page)}`}
                        class="bg-green border-black border text-white hover:bg-black px-1.5 py-1 inline-flex items-center justify-end w-24"
                    >
                        <span class="relative top-[1px] text-[calc(1em-2px)]">
                            Next page &rarr;
                        </span>
                    </a>
                :   <div
                        class="bg-green border-black border text-white hover:bg-black cursor-not-allowed px-1.5 py-1 inline-flex items-center justify-end w-24 opacity-30"
                        aria-disabled="true"
                    >
                        <span class="relative top-[1px] text-[calc(1em-2px)]">
                            Next page &rarr;
                        </span>
                    </div>
            }
        </div>
    </div>
</BaseLayout>
